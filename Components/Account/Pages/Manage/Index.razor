@page "/Account/Manage"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BankApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger
@rendermode InteractiveServer 

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
@* <StatusMessage Message="@Message" /> *@

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" OnValidSubmit="Save" FormName="profile" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="fw-bold">Username (optional)</div>
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">@(username ?? "Loading...")</label>
            </div>
            <!-- First Name -->
            <div class="fw-bold">First name</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="First Name" required />
                <label for="first-name">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <!-- Last Name -->
            <div class="fw-bold">Last name</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Last Name" required />
                <label for="last-name">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <!-- Nickname -->
            <div class="fw-bold">Nickname</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NickName" class="form-control" placeholder="NickName" />
                <label for="nickname">Nickname</label>
                <ValidationMessage For="() => Input.NickName" class="text-danger" />
            </div>
            <!-- Address -->
            <div class="fw-bold">Address</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Address" class="form-control" placeholder="Address" required />
                <label for="address">Address</label>
                <ValidationMessage For="() => Input.Address" class="text-danger" />
            </div>
            <!-- Social Security Number -->
            <div class="fw-bold">Social security number</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.SocialSecurityNumber" class="form-control" placeholder="SSN" required />
                <label for="social-security-number">Social Security Number</label>
                <ValidationMessage For="() => Input.SocialSecurityNumber" class="text-danger" />
            </div>
            <!-- Phone Number -->
            <div class="fw-bold">Phone number</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Phone Number" />
                <label for="phone-number">Phone Number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <!-- Update Button -->
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private ApplicationUser? _user;
    private string? username;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    // private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            var user = authState.User;
            var userId = UserManager.GetUserId(user);
            if (userId is not null)
            {
                _user = await UserManager.FindByIdAsync(userId);
                if (_user is not null)
                {
                    username = _user.UserName;
                    Input.FirstName = _user.FirstName;
                    Input.LastName = _user.LastName;
                    Input.NickName = _user.Nickname;
                    Input.SocialSecurityNumber = _user.SocialSecurityNumber;
                    Input.Address = _user.Address;
                    Input.PhoneNumber = _user.PhoneNumber;
                }
            }
        }
    }

    private async Task Save()
    {
        identityErrors = null;
        var user = await UpdateUser();
        if (user is null)
        {
            identityErrors = new[] { new IdentityError { Description = "User not found." } };
            return;
        }

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.Nickname = Input.NickName;
        user.SocialSecurityNumber = Input.SocialSecurityNumber;
        user.Address = Input.Address;
        user.PhoneNumber = Input.PhoneNumber;

        var result = await UserManager.UpdateAsync(user);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User profile updated successfully.");
        StateHasChanged();
    }

    private async Task<ApplicationUser?> UpdateUser()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            var user = authState.User;
            var userId = UserManager.GetUserId(user);
            if (userId is not null)
            {
                return await UserManager.FindByIdAsync(userId);
            }
        }
        return null;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(32, ErrorMessage = "Max 32 characters.")]
        [Display(Name = "FirstName")]
        public string FirstName { get; set; } = "";

        [Required]
        [StringLength(32, ErrorMessage = "Max 32 characters.")]
        [Display(Name = "LastName")]
        public string LastName { get; set; } = "";

        [StringLength(16, MinimumLength = 5, ErrorMessage = "Nickname must be 5-16 characters.")]
        [Display(Name = "NickName")]
        public string? NickName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Max 100 characters.")]
        [Display(Name = "Address")]
        public string Address { get; set; } = "";

        [Required]
        [StringLength(12, MinimumLength = 12, ErrorMessage = "SSN must be exactly 12 digits.")]
        [Display(Name = "SocialSecurityNumber")]
        public string SocialSecurityNumber { get; set; } = "";

        [Phone]
        [StringLength(12, ErrorMessage = "Max 12 characters.")]
        [Display(Name = "PhoneNumber")]
        public string? PhoneNumber { get; set; } = "";
    }
}