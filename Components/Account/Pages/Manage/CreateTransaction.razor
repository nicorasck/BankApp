@page "/Bank/CreateTransaction"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BankApp.Data
@using BankApp.Models
@using Microsoft.EntityFrameworkCore

@inject DbContextService DbContextService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout BankLayout


<PageTitle>New Transaction</PageTitle>

<div class="container">
<h3>Transfer Funds</h3>
    <EditForm Model="transaction" OnValidSubmit="CreateNewTransaction" method="post" FormName="CreateTransaction">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>From Account</label>
            <select @bind="transaction.FromAccountId" class="form-control">
                <option>Select an account</option>
                @foreach (var account in accounts)
                {
                    <option value="@account.Id">@account.AccountName</option>
                }
            </select>
            <ValidationMessage For="@(() => transaction.FromAccountId)" />
        </div>
        <div class="mb-3">
            <label>To Account</label>
            <select @bind="transaction.ToAccountId" class="form-control">
                <option>Select an account</option>
                @foreach (var account in accounts)
                {
                    <option value="@account.Id">@account.AccountName</option>
                }
            </select>
            <ValidationMessage For="@(() => transaction.ToAccountId)" />
        </div>
        <div class="mb-3">
            <label>Amount</label>
            <InputNumber @bind-Value="transaction.OutgoingBalance" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Currency</label>
            <select @bind="transaction.Currency" class="form-control">
                @foreach (Currency c in Enum.GetValues(typeof(Currency)))
                {
                    <option value="@c">@c</option>
                }
            </select>
            <ValidationMessage For="@(() => transaction.Currency)" />
        </div>
        <!-- Message -->
        <div class="mb-3">
            <label>Message (optional)</label>
            <InputTextArea @bind-Value="transaction.Message" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Submit Transaction</button>
    </EditForm>
</div>

@code {
    private BankTransaction transaction = new BankTransaction();
    private List<Account> accounts = new List<Account>();

    // then it is initialized this will be called.
    protected override async Task OnInitializedAsync()
    {
        await LoadingAccounts();
    }
    // Loading accounts for the user
    private async Task LoadingAccounts()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {   // Bringing the accounts IF user is not Null => callin method from Service
            accounts = await DbContextService.GetAccountsByUserAsync(user);
        }
    }
    private async Task CreateNewTransaction()
    {
        if (!accounts.Any())
        {   // to ensure the accounts are loaded
            await LoadingAccounts();
            if (!accounts.Any())
            {
                Console.WriteLine("No accounts loaded.");
                return; // If still no accounts, exit the method
            }
        }
        
        try
        {
            transaction.TransactionDate = DateTime.Now;
            // Calling Service to make a transaction
            await DbContextService.CreateTransactionAsync(transaction);
            Console.WriteLine("Transaction created successfully.");
            NavigationManager.NavigateTo("/Bank/Accounts");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Something went wrong: {ex.Message}", ex);
        }
    }
}
