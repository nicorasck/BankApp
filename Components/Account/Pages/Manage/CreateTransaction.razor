@page "/Bank/CreateTransaction"
@inject DbContextService DbContextService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout BankLayout


<PageTitle>New Transaction</PageTitle>

<h3>Transfer Funds</h3>

<EditForm Model="transaction" OnValidSubmit="OnValidSubmit" method="post" FormName="CreateTransaction">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Recipient Account Number</label>
        <InputText @bind-Value="transaction.ToAccount" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Amount</label>
        <InputNumber @bind-Value="transaction.OutgoingBalance" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Currency</label>
        <InputSelect @bind-Value="transaction.Currency" class="form-control">
            @foreach (Currency c in Enum.GetValues(typeof(Currency)))
            {
                <option value="@c">@c</option>
            }
        </InputSelect>
    </div>
    <!-- Nessage -->
    <div class="mb-3">
        <label>Message (optional)</label>
        <InputTextArea @bind-Value="transaction.Message" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Submit Transaction</button>
</EditForm>

@code {
    private BankTransaction transaction = new BankTransaction();

    private async Task OnValidSubmit()
    {
        // Bringing the users accounts and assign the FromAccountId
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user is null)
        {
            return;
        }
        // Add more code => to choose which account and so on
        // This code will look after first account of the user (not optional)
        var userAccount = user.Accounts.FirstOrDefault();
        if (userAccount == null)
        {
            // Error handling
            return;
        }
        transaction.FromAccountId = userAccount.Id;
        transaction.TransactionDate = DateTime.Now;
        // Calling Service to make a transaction
        await DbContextService.CreateTransactionAsync(transaction);
        NavigationManager.NavigateTo("/Bank");
    }
}
