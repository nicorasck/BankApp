@page "/Bank/CreateAccount"
@using BankApp.Models
@inject DbContextService DbContextService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout BankLayout

<PageTitle>Create Bank Account</PageTitle>
<div class="container">
<h3>Create a new Account</h3>
    <EditForm Model="newAccount" OnValidSubmit="OnValidSubmit" method="post" FormName="CreateAccount">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <!-- Account Name -->
        <div class="mb-3">
            <label>Account Name</label>
            <InputText @bind-Value="newAccount.AccountName" class="form-control" />
        </div>
        <!-- Account Type -->
        <div class="mb-3">
            <label for="accountType">Account Type</label>
            <InputSelect id="accountType" @bind-Value="newAccount.AccountType" class="form-control">
                @foreach (var type in Enum.GetValues(typeof(AccountType)).Cast<AccountType>())
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-primary">Create Account</button>
    </EditForm>
</div>

@code {

    private Account newAccount = new Account();

    private async Task OnValidSubmit()
    {
        // bringing the current user (logged in)
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            Console.WriteLine("User is not authenticated.");
            return;
        }

        if (string.IsNullOrWhiteSpace(newAccount.AccountName))
        {
            Console.WriteLine("Account name is required.");
            return;
        }

        newAccount.UserId = user.Id;

        // Calling service to create account
        await DbContextService.CreateAccountAsync(newAccount, user);
        // to get back to BankIndex.razor ("/Bank")
        NavigationManager.NavigateTo("/Bank/CreateAccount");
    }

}