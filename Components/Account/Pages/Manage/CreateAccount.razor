@page "/Bank/CreateAccount"
@using BankApp.Models
@inject DbContextService DbContextService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer 

<PageTitle>Create Bank Account</PageTitle>
<h3>Create a new Account</h3>

<EditForm Model="newAccount" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <!-- Account Name -->
    <div class="mb-3">
        <label>Account Name</label>
        <InputText @bind-Value="newAccount.AccountName" class="form-control" />
    </div>
    <!-- Add more to select account type, AccountType -->
    <button type="submit" class="btn btn-primary">Create Account</button>
</EditForm>


@code{

    private Account newAccount = new Account();

    private async Task OnValidSubmit()
    {
        // bringing the current user (logged in)
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user is null)
        {   // Handle error
            return;
        }

        newAccount.UserId = user.Id;

        // Calling service to create account

        // ATTENTION!
        // Do not forget to modify this one => AccountType and get rid of the hardcoding value of Balance!
        await DbContextService.CreateMainAccountAsync(user);
        // to get back to BankIndex.razor ("/Bank")
        NavigationManager.NavigateTo("/Bank");
    }

}