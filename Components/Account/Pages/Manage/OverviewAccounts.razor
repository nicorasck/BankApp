@page "/Bank/Accounts"
@using BankApp.Models
@using BankApp.Data
@inject DbContextService DbContextService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@layout BankLayout
@rendermode InteractiveServer


<PageTitle>Accounts Overview</PageTitle>

<div class="container">
    <div class="alert alert-info">
        Hello, Here are your accounts.
    </div>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="thead-light">
                <tr>
                    <th>Account Number</th>
                    <th>Account Name</th>
                    <th>Balance</th>
                    <th>Account Type</th>
                    <th>Status</th>
                    <th>Actions</th>
                    <th>History</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in accounts)
                {
                    <tr>
                        <td>@a.AccountNumber</td>
                        <td>@a.AccountName</td>
                        <td>@a.Balance.ToString("C")</td>
                        <td>@a.AccountType</td>
                        <td>@(account.IsActive ? "Active" : "Inactive")</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteAccount(a)">Delete</button>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ToggleHistory(a)">History</button>
                        </td>
                        <td>
                           <button class="btn btn-icon" @onclick="() => ToEditAccount(a)" style="border: none; background: none;">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="24" height="24"><path d="M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z"/></svg></button>
                        </td>
                    </tr>
                    @if (a.DisplayTransactions)
                    {
                        <tr>
                            <td colspan="6">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>From</th>
                                            <th>To</th>
                                            <th>Amount</th>
                                            <th>Message</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var t in a.BankTransactions)
                                        {
                                            <tr>
                                                <td>@t.TransactionDate.ToString()</td>
                                                <td>@t.FromAccount</td>
                                                <td>@t.ToAccount</td>
                                                <td>@t.OutgoingBalance.ToString("C")</td>
                                                <td>@t.Message</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                Note To myself: Make sure this line will be in the 'bottom', like a border => hr/
                                <hr/> 
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Account> accounts = new();
    private Account account = new();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            // Bringing accounts for the authenticated user
            accounts = await DbContextService.GetAccountsByUserAsync(user);
            // Bringing all transactions for each account
            foreach (var a in accounts)
            {
                a.BankTransactions = await DbContextService.GetTransactionsForAccountAsync(a.Id, a.AccountNumber);
            }
        }
    }

    // To show history (toggle button)
    private async Task ToggleHistory(Account account)
    {
        // Error handling
        if (account != null && account.BankTransactions != null && account.BankTransactions.Any())
        {
            account.BankTransactions = await DbContextService.GetTransactionsForAccountAsync(account.Id, account.AccountNumber);
        }
        account.DisplayTransactions = !account.DisplayTransactions;
        StateHasChanged();
    }

    // Deletes account and updates
    private async Task DeleteAccount(Account _account)
    {
        try
        {
            if (_account != null)
            {
                // Calling service to delete the account from the database
                await DbContextService.DeleteAccountAsync(_account.UserId, _account.Id);
                accounts?.Remove(_account);
                // Trigger a UI refresh
                StateHasChanged();
                // to get back to BankIndex.razor ("/Bank")
                NavigationManager.NavigateTo("/Bank/Accounts");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Something went wrong: {ex.Message}");
        }
    }
    private void ToEditAccount(Account editAccount)
    {
        NavigationManager.NavigateTo("/Bank/EditAccount/{editAccount.Id}");
    }
}
