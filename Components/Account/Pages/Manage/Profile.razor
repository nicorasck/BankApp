@page "/EditProfile"
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

@* Do NOT forget to navigate the page from Account!!! *@


<PageTitle>Profile</PageTitle>

<h1>Profile</h1>

<div class="row">
    <div class="col-md-4">
        @* <StatusMessage Message="@Message" /> *@
        <EditForm Model="ProfileInput" OnValidSubmit="UpdateProfile" FormName="profile">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <!-- FirstName -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.FirstName" class="form-control" placeholder="First Name" />
                <label for="first-name">First Name</label>
                <ValidationMessage For="() => ProfileInput.FirstName" class="text-danger" />
            </div>
            <!-- LastName -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.LastName" class="form-control" placeholder="Last Name" />
                <label for="last-name">Last Name</label>
                <ValidationMessage For="() => ProfileInput.LastName" class="text-danger" />
            </div>
            <!-- Nickname -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.Nickname" class="form-control" placeholder="Nickname" />
                <label for="nickname">Nickname</label>
                <ValidationMessage For="() => ProfileInput.Nickname" class="text-danger" />
            </div>
            <!-- Address -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.Address" class="form-control" placeholder="Address" />
                <label for="address">Address</label>
                <ValidationMessage For="() => ProfileInput.Address" class="text-danger" />
            </div>
            <!-- Social Security Number -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.SocialSecurityNumber" class="form-control"
                    placeholder="Social Security Number" />
                <label for="social-security-number">Social Security Number</label>
                <ValidationMessage For="() => ProfileInput.SocialSecurityNumber" class="text-danger" />
            </div>
            <!-- PhoneNumber -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.PhoneNumber" class="form-control" placeholder="Phone Number" />
                <label for="phone-number">Phone Number</label>
                <ValidationMessage For="() => ProfileInput.PhoneNumber" class="text-danger" />
            </div>
            <!-- Submit the data -->
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update Profile</button>
        </EditForm>
        <!-- Button to go back to Profile view -->
            <NavLink href="/Account/Manage">
                <button type="Edit" class="w-100 btn btn-lg btn-primary" style="margin-top: 10px; color:white ;">Back</button>
            </NavLink>
    </div>
</div>


@code {
    private ApplicationUser? User; // Current user
    private string? Message;
    /// <summary>
    /// Gets or sets the name of the form value. If not specified, the property name will be used.
    /// </summary>
    [SupplyParameterFromForm]
    private ProfileInputModel ProfileInput { get; set; } = new();
    protected override async Task OnInitializedAsync() // Current user details
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync(); // Current authentication state
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value; // UserId from Claim
        if (userId != null)
        {
            // Fetch the user from the database
            User = await UserManager.FindByIdAsync(userId);

            if (User != null)
            {
                ProfileInput = new ProfileInputModel
                {
                    FirstName = User.FirstName,
                    LastName = User.LastName,
                    Nickname = User.Nickname, // This can be null ("string?" in ApplicationUUser)
                    Address = User.Address,
                    SocialSecurityNumber = User.SocialSecurityNumber,
                    PhoneNumber = User.PhoneNumber
                };
            }
        }
    }

    // UpdateProfile - when the user enter the button Submit
    private async Task UpdateProfile()
    {
        if (User == null)
        {
            Message = "User not found.";
            return;
        }

        // Updating User
        User.FirstName = ProfileInput.FirstName;
        User.LastName = ProfileInput.LastName;
        User.Nickname = ProfileInput.Nickname;
        User.Address = ProfileInput.Address;
        User.SocialSecurityNumber = ProfileInput.SocialSecurityNumber;
        User.PhoneNumber = ProfileInput.PhoneNumber;

        
        var result = await UserManager.UpdateAsync(User); // Save the changes to the database

        if (result.Succeeded)
        {   
            Message = "Profile updated successfully.";
        }
        else
        {
            Message = "Error updating profile: " + string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }
    private sealed class ProfileInputModel
    {
        [Required]
        [StringLength(32, ErrorMessage = "First name must be at most 32 characters long.")]
        public string FirstName { get; set; } = "";

        [Required]
        [StringLength(32, ErrorMessage = "Last name must be at most 32 characters long.")]
        public string LastName { get; set; } = "";

        [StringLength(16, ErrorMessage = "Nickname must be at most 16 characters long.")]
        public string Nickname { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Address must be at most 100 characters long.")]
        public string Address { get; set; } = "";

        [Required]
        [StringLength(12, ErrorMessage = "Social Security Number must be 12 characters long.")]
        public string SocialSecurityNumber { get; set; } = "";

        [Phone]
        [StringLength(12, ErrorMessage = "Phone Number must be 12 characters long.")]
        public string PhoneNumber { get; set; } = "";

    }
}