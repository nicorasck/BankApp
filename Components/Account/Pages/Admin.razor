@page "/Admin"

@using BankApp.Data
@using Microsoft.AspNetCore.Authorization
@using BankApp.Models
@using BankApp
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authenticationStateProvider

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Auth</PageTitle>

<!-- Main Container -->
<div class="container-fluid mt-5">
    <!-- Display for Regular Users -->
    <AuthorizeView>
        <AuthorizeView Roles="Admin" Context="adminContext">
            <!-- If the user is an Admin, this block will render -->
            <div class="alert alert-info" role="alert">
                Hello, <strong>@adminContext.User.Identity?.Name</strong>! You are an Admin.
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="User" Context="userContext">
            <!-- If the user is not an Admin, this block will render -->
            <div class="alert alert-success" role="alert">
                Hello, <strong>@userContext.User.Identity?.Name</strong>!
            </div>
        </AuthorizeView>
    </AuthorizeView>

    <!-- Only visible to Admins -->
    <AuthorizeView Roles="Admin">
        <div class="card shadow-lg mt-4">
            <div class="card-header bg-dark text-white">
                <h5 class="card-title mb-0">Admin Dashboard</h5>
            </div>
            <div class="card-body">
                <p>Welcome to the admin dashboard. You have access to manage users and other admin tasks.</p>
            </div>
            <!-- User Table -->
            <div class="card shadow-lg">
                <div class="card-header bg-dark text-white">
                    <h5 class="card-title mb-0">User Management</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>First name</th>
                                    <th>Last name</th>
                                    <th>Nickname</th>
                                    <th>Email</th>
                                    <th>Phone Number</th>
                                    <th>Address</th>
                                    <th>Social Security Number</th>
                                    <th>Role</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var u in users)
                                {
                                    <tr>
                                        <td>@u.FirstName</td>
                                        <td>@u.LastName</td>
                                        <td>@u.Nickname</td>
                                        <td>@u.Email</td>
                                        <td>@u.PhoneNumber</td>
                                        <td>@u.Address</td>
                                        <td>@u.SocialSecurityNumber</td>
                                        <td>
                                            @{
                                                string joinRoles = string.Join(",", userRoles[u.Id]);
                                                if (userRoles[u.Id].Contains("Admin"))
                                                {
                                                    <span class="badge bg-success">Admin</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">User</span>
                                                }
                                            }
                                        </td>
                                        <td>
                                            @* Custom made buttons => *@
                                            <div class="dropdown">
                                                <button type="button" class="btn btn-primary" @onclick="() => ToggleRollDown(u.Id)">
                                                    Edit
                                                </button>
                                                @if (selectedUserId == u.Id && IsRollDown)
                                                {
                                                    <div class="dropdown-menu show">
                                                        <button class="dropdown-item" @onclick="() => ChangeRole(u.Id, \"Admin\")">Make Admin</button>
                                                        <button class="dropdown-item" @onclick="() => ChangeRole(u.Id, \"User\")">Make User</button>
                                                    </div>
                                                }
                                            </div>
                                            <button type="button" @onclick="() => DeleteUser(u.Id)"
                                                class="btn btn-sm btn-outline-danger">Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </AuthorizeView>
</div>

@code {
    // List to store all users
    private List<ApplicationUser> users;
    private ApplicationUser SelectUserRole;
    // these two are needed to get the function of roll down button (admin/user)
    private string selectedUserId;
    private bool IsRollDown;
    // Dictionary to store user roles
    private Dictionary<string, List<string>> userRoles = new Dictionary<string, List<string>>();

    // Initializing
    protected override async Task OnInitializedAsync()
    {
        // Fetch all users from the UserManager
        users = userManager.Users.ToList();

        // Bringing roles for each user
        foreach (var user in users)
        {
            userRoles[user.Id] = (await userManager.GetRolesAsync(user)).ToList();
        }
    }

    // Button to "Roll down"
    private void ToggleRollDown(string userId) 
    {
        if (selectedUserId == userId)
        {
            IsRollDown = !IsRollDown;
        }
        else
        {
            selectedUserId = userId;
            IsRollDown = true;
        }
    }

    // Change the roll for user
    private async Task ChangeRole(string userId, string role)
    {
        var user = await userManager.FindByIdAsync(userId);

        if (user != null)
        {
            // Delete existing role
            var currentRoles = await userManager.GetRolesAsync(user);
            await userManager.RemoveFromRolesAsync(user, currentRoles);
            // New role
            await userManager.AddToRoleAsync(user, role);
            // Updating in dictionary
            userRoles[user.Id] = (await userManager.GetRolesAsync(user)).ToList();
            // Close roll down button after changing
            IsRollDown = false;
        }
    }

    // Delete a user
    private async Task DeleteUser(string userId)
    {
        // Find the user by ID
        var user = await userManager.FindByIdAsync(userId);
        if (user != null)
        {
            // Delete the user
            await userManager.DeleteAsync(user);
            // Refresh the user list
            users = userManager.Users.ToList();
        }
    }
}
