@page "/Admin"
@using BankApp.Data
@using Microsoft.AspNetCore.Authorization
@using BankApp.Models
@using BankApp
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Auth</PageTitle>

<!-- Main Container -->
<div class="container-fluid mt-5">
    <!-- Display for Regular Users -->
    <AuthorizeView>
        <AuthorizeView Roles="Admin" Context="adminContext">
            <!-- If the user is an Admin, this block will render -->
            <div class="alert alert-info" role="alert">
                Hello, <strong>@adminContext.User.Identity?.Name</strong>! You are an Admin.
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="User" Context="userContext">
            <!-- If the user is not an Admin, this block will render -->
            <div class="alert alert-success" role="alert">
                Hello, <strong>@userContext.User.Identity?.Name</strong>! You are a User.
            </div>
        </AuthorizeView>
    </AuthorizeView>

    <!-- Only visible to Admins -->
    <AuthorizeView Roles="Admin">
        <div class="card shadow-lg mt-4">
            <div class="card-header bg-dark text-white">
                <h5 class="card-title mb-0">Admin Dashboard</h5>
            </div>
            <div class="card-body">
                <p>Welcome to the admin dashboard. You have access to manage users and other admin tasks.</p>
            </div>
            <!-- User Table -->
            <div class="card shadow-lg">
                <div class="card-header bg-dark text-white">
                    <h5 class="card-title mb-0">User Management</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>First name</th>
                                    <th>Last name</th>
                                    <th>Nickname</th>
                                    <th>Email</th>
                                    <th>Phone Number</th>
                                    <th>Address</th>
                                    <th>Social Security Number</th>
                                    <th>Role</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var u in users)
                                {
                                    <tr>
                                        <td>@u.FirstName</td>
                                        <td>@u.LastName</td>
                                        <td>@u.Nickname</td>
                                        <td>@u.Email</td>
                                        <td>@u.PhoneNumber</td>
                                        <td>@u.Address</td>
                                        <td>@u.SocialSecurityNumber</td>
                                        <td>
                                                @foreach(var roles in userRoles[u.Id])
                                                {
                                                    string _color;
                                                    if (roles == "Admin")
                                                    {
                                                        _color = "background-color: red;";
                                                    }
                                                    else if (roles == "User")
                                                    {
                                                        _color = "background-color: blue;";
                                                    }
                                                    else
                                                    {
                                                        _color = "background-color: gray;";
                                                    }
                                                   <span class="badge" style="@_color; margin: 2%;">@roles</span>
                                                   @* @if (currentUserEmail == "admin@admin.se" && u.Email != "admin@admin.se" || (u.Email == currentUserEmail))
                                                   { *@
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" @onclick="() => RemoveRoleAsync(u.Id, roles)">
                                                            <path fill="#ea2323" d="M7 21q-.825 0-1.412-.587T5 19V6H4V4h5V3h6v1h5v2h-1v13q0 .825-.587 1.413T17 21zm2-4h2V8H9zm4 0h2V8h-2z"/>
                                                        </svg>
                                                   @* } *@
                                                }
                                        </td>
                                        <td>
                                            <select class="form-select" @onchange="(e) => SetRoleAsync(u.Id, e.Value.ToString())">
                                                <option disabled selected>Choose the role</option>
                                                @foreach(var user in SelectedRoles)
                                                {
                                                    <option value="@user">@user</option>
                                                }
                                            </select>
                                            <button type="button" @onclick="() => DeleteUser(u.Id)"
                                                class="btn btn-sm btn-outline-danger" style="margin-top: 2%;">Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </AuthorizeView>
</div>

@code {
    // List to store all users
    private List<ApplicationUser> users;
    //private string currentUserEmail;

    // Dictionary to store user roles
    private Dictionary<string, List<string>> userRoles = new Dictionary<string, List<string>>();

    // Initializing
    private List<string> SelectedRoles = new() {"Admin", "User"};
    protected override async Task OnInitializedAsync()
    {
        // Bringing users from the UserManager
        users = userManager.Users.ToList();

        // Bringing roles for each user
        foreach (var user in users)
        {
            userRoles[user.Id] = (await userManager.GetRolesAsync(user)).ToList();
        }
    }

    private async Task SetRoleAsync(string userId, string role)
    {
        // Remove all existing roles
        var currentRoles = await userManager.FindByIdAsync(userId);
        if(currentRoles == null) return;

        var result = await userManager.AddToRoleAsync(currentRoles, role);

        if(result.Succeeded)
        {
            userRoles[userId].Add(role);
            StateHasChanged();
        }
       
        // Add the new role
     
        // Refresh the user list and roles
        await ShowUsers();
    }

    // Remove role
    private async Task RemoveRoleAsync(string userId, string role)
    {

        // Existing roles
        var currentRoles = await userManager.FindByIdAsync(userId);
        if(currentRoles == null) return;

        var result = await userManager.RemoveFromRoleAsync(currentRoles, role);

        if(result.Succeeded)
        {
            userRoles[userId].Remove(role);
            StateHasChanged();
        }
     
        // Refresh the user list and roles
        await ShowUsers();

        // Bringing the current user name by using @inject AuthenticationStateProvider
    //    var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
    //    var currentUserEmail = authState.User.Identity?.Name;
        
        // Bringing the user => the one whose role is being deleted
    //    var user = await userManager.FindByIdAsync(userId);
    //    if (user == null)
    //    {
    //        return;
    //    }

        
        // Prevent the "User" who is an Admin to delete the "Main" Admin (admin@amin.se).
        // Only the Admin can delete other Users whose role is Admin as well.
        
    //    if (role == "Admin".ToLower())
    //    {
    //        if (currentUserEmail == "admin@admin.se" && user.Email != "admin@admin.se")
    //        {
    //            Console.WriteLine($"Deleting the 'Admin' role for {user.Email}.");
    //        }
    //        else if (user.Email == currentUserEmail)
    //        {
    //            Console.WriteLine($"Deleting the 'Admin' role for {user.Email}.");
    //        }
    //        // If a User tries to delete an Admin role for the "Main" Admin.
    //        else
    //        {
    //            Console.WriteLine($"Deleting the 'Admin' role for {user.Email} is not allowed.");
    //            return;
    //        }
    //    }
    //
    //    var result = await userManager.RemoveFromRoleAsync(user, role);
    //
    //    if(result.Succeeded)
    //    {
    //        userRoles[userId].Remove(role);
    //        StateHasChanged();
    //    }
    // 
    //    // Refresh the user list and roles
    //    await ShowUsers();
        }
    

    // Delete user
    private async Task DeleteUser(string userId)
    {   // Find the user by ID
        var user = await userManager.FindByIdAsync(userId);
        if (user != null)
        {    
            var role = await userManager.GetRolesAsync(user);
            if (role.Contains("User"))
            {
                // Delete the user
                await userManager.DeleteAsync(user);
                // Refresh the user list
                await ShowUsers();
            }
            else
            {
                // Bringing the current user name by using @inject AuthenticationStateProvider
                //var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
                //var currentUser = authState.User.Identity?.Name ?? "Unknown User";
                //Console.WriteLine($"{currentUser} attempted to delete a non-User role.");
                Console.WriteLine("Admin role cannot be deleted.");
                await ShowUsers();
            }
        }
        StateHasChanged();
    }

    private async Task ShowUsers()
    {
        users = userManager.Users.ToList();
        foreach (var user in users)
        {
            userRoles[user.Id] = (await userManager.GetRolesAsync(user)).ToList();
        }
        StateHasChanged();
    }
}