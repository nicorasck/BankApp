@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BankApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage Message="@Message" />

<div class="row">
    <div class="col-md-6">
        <!-- Form for updating user profile -->
        <EditForm Model="Input" FormName="profile" OnValidSubmit="UpdateUser" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="fw-bold">Username (optional)</div>
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">@user.UserName</label>
            </div>
            <!-- First Name -->
            <div class="fw-bold">First name</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="First Name" required />
                <label for="first-name">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <!-- Last Name -->
            <div class="fw-bold">Last name</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Last Name" required />
                <label for="last-name">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <!-- Nickname -->
            <div class="fw-bold">Nickname</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Nickname" class="form-control" placeholder="Nickname" />
                <label for="nickname">Nickname</label>
                <ValidationMessage For="() => Input.Nickname" class="text-danger" />
            </div>
            <!-- Address -->
            <div class="fw-bold">Address</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Address" class="form-control" placeholder="Address" required />
                <label for="address">Address</label>
                <ValidationMessage For="() => Input.Address" class="text-danger" />
            </div>
            <!-- Social Security Number -->
            <div class="fw-bold">Social security number</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.SocialSecurityNumber" class="form-control" placeholder="SSN" required />
                <label for="social-security-number">Social Security Number</label>
                <ValidationMessage For="() => Input.SocialSecurityNumber" class="text-danger" />
            </div>
            <!-- Phone Number -->
            <div class="fw-bold">Phone number</div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Phone Number" />
                <label for="phone-number">Phone Number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <!-- Update Button -->
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser? user;
    private string? Message;
    private string? username;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        if (user != null)
        {
            Input = new InputModel
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                Nickname = user.Nickname,
                Address = user.Address,
                SocialSecurityNumber = user.SocialSecurityNumber,
                PhoneNumber = user.PhoneNumber
            };
        }
    }

    private async Task UpdateUser()
    {
        if (user == null)
        {
            Message = "Error: User not found.";
            return;
        }

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.Nickname = Input.Nickname;
        user.Address = Input.Address;
        user.SocialSecurityNumber = Input.SocialSecurityNumber;
        user.PhoneNumber = Input.PhoneNumber;

        var result = await UserManager.UpdateAsync(user);
        if (!result.Succeeded)
        {
            Message = "Error updating profile: " + string.Join(", ", result.Errors.Select(e => e.Description));
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(32, ErrorMessage = "Max 32 characters.")]
        public string FirstName { get; set; } = "";

        [Required]
        [StringLength(32, ErrorMessage = "Max 32 characters.")]
        public string LastName { get; set; } = "";

        [StringLength(16, MinimumLength = 5, ErrorMessage = "Nickname must be 5-16 characters.")]
        public string? Nickname { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Max 100 characters.")]
        public string Address { get; set; } = "";

        [Required]
        [StringLength(12, MinimumLength = 12, ErrorMessage = "SSN must be exactly 12 digits.")]
        public string SocialSecurityNumber { get; set; } = "";

        [Phone]
        [StringLength(12, ErrorMessage = "Max 12 characters.")]
        public string? PhoneNumber { get; set; } = "";
    }
}
