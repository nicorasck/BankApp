@page "/EditProfile"
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

@using BankApp.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

<PageTitle>Profile</PageTitle>

<h1>Profile</h1>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

<div class="row">
    <div class="col-md-6">
        <EditForm Model="ProfileInput" FormName="EditProfile" OnValidSubmit="UpdateProfile" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.FirstName" class="form-control" placeholder="Enter First Name" />
                <label for="first-name" class="form-label">First Name</label>
                <ValidationMessage For="() => ProfileInput.FirstName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.LastName" class="form-control" placeholder="Enter Last Name" />
                <label for="last-name" class="form-label">Last Name</label>
                <ValidationMessage For="() => ProfileInput.LastName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.Nickname" class="form-control" placeholder="Enter Nickname" />
                <label for="nickname" class="form-label">Nickname</label>
                <ValidationMessage For="() => ProfileInput.Nickname" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.SocialSecurityNumber" class="form-control"
                    placeholder="Enter SSN (10-12 digits)" />
                <label for="SocialSecurityNumber" class="form-label">Social Security Number</label>
                <ValidationMessage For="() => ProfileInput.SocialSecurityNumber" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.Address" class="form-control" placeholder="Enter Address" />
                <label for="Address" class="form-label">Address</label>
                <ValidationMessage For="() => ProfileInput.Address" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="ProfileInput.PhoneNumber" class="form-control"
                    placeholder="Enter Phone Number" />
                <label for="PhoneNumber" class="form-label">Phone Number</label>
                <ValidationMessage For="() => ProfileInput.PhoneNumber" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser? User;
    private string? Message;
    private string? phoneNumber;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    
    [SupplyParameterFromForm]
    private ProfileInputModel ProfileInput { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        User = await UserAccessor.GetRequiredUserAsync(HttpContext);
        phoneNumber = await UserManager.GetPhoneNumberAsync(User);

        // Load user data
        ProfileInput.FirstName = User.FirstName;
        ProfileInput.LastName = User.LastName;
        ProfileInput.Nickname = User.Nickname;
        ProfileInput.SocialSecurityNumber = User.SocialSecurityNumber;
        ProfileInput.Address = User.Address;
        ProfileInput.PhoneNumber = User.PhoneNumber;
    }

    private async Task UpdateProfile()
    {
        bool isUpdated = false;

        if (User == null)
        {
            Message = "User not found.";
            return;
        }

        if (ProfileInput.FirstName != User.FirstName ||
        ProfileInput.LastName != User.LastName ||
        ProfileInput.Nickname != User.Nickname ||
        ProfileInput.SocialSecurityNumber != User.SocialSecurityNumber ||
        ProfileInput.Address != User.Address ||
        ProfileInput.PhoneNumber != User.PhoneNumber)
        {
            User.FirstName = ProfileInput.FirstName;
            User.LastName = ProfileInput.LastName;
            User.Nickname = ProfileInput.Nickname;
            User.SocialSecurityNumber = ProfileInput.SocialSecurityNumber;
            User.Address = ProfileInput.Address;
            User.PhoneNumber = ProfileInput.PhoneNumber;

            var updateResult = await UserManager.UpdateAsync(User);
            isUpdated = updateResult.Succeeded;
        }

        if (isUpdated)
        {
            await SignInManager.RefreshSignInAsync(User);
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }

        StateHasChanged();
    }

    private sealed class ProfileInputModel
    {
        [Required(ErrorMessage = "First Name is required.")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "First Name must be at least 2 characters long.")]
        public string? FirstName { get; set; }

        [Required(ErrorMessage = "Last Name is required.")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Last Name must be at least 2 characters long.")]
        public string? LastName { get; set; }

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [StringLength(100)]
        [Display(Name = "Address")]
        public string? Address { get; set; }

        [StringLength(12, MinimumLength = 5, ErrorMessage = "Nickname must be between 5 and 12 characters.")]
        public string? Nickname { get; set; }

        [Required(ErrorMessage = "Social Security Number is required.")]
        [StringLength(12, MinimumLength = 10, ErrorMessage = "Social Security Number must be between 10 and 12 characters.")]
        public string? SocialSecurityNumber { get; set; }
    }
}